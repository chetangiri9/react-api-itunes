{"version":3,"sources":["components/Search.js","components/Album.js","components/AlbumList.js","api/itunes.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","onFormSubmit","event","preventDefault","props","onSubmit","this","className","type","value","onChange","e","setState","target","placeholder","React","Component","Album","href","album","collectionViewUrl","src","artworkUrl100","alt","artistName","trackName","AlbumList","albums","map","key","trackId","axios","create","baseURL","App","onSearchSubmit","a","itunes","get","params","response","data","results","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA4BeA,G,iNAxBbC,MAAQ,CAAEC,KAAM,I,EAEhBC,aAAe,SAAAC,GACbA,EAAMC,iBAEN,EAAKC,MAAMC,SAAS,EAAKN,MAAMC,O,wEAGvB,IAAD,OACP,OACE,0BAAMK,SAAUC,KAAKL,cACnB,yBAAKM,UAAU,SACb,2BACEC,KAAK,OACLC,MAAOH,KAAKP,MAAMC,KAClBU,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEZ,KAAMW,EAAEE,OAAOJ,SAC9CK,YAAY,oC,GAjBAC,IAAMC,YCATC,G,6LAEjB,OACE,yBAAKV,UAAU,QACb,uBACEM,OAAO,SACPN,UAAU,kBACVW,KAAMZ,KAAKF,MAAMe,MAAMC,mBAEvB,yBACEb,UAAU,MACVc,IAAKf,KAAKF,MAAMe,MAAMG,cACtBC,IAAKjB,KAAKF,MAAMe,MAAMK,aAExB,yBAAKjB,UAAU,cACb,wBAAIA,UAAU,QAAQD,KAAKF,MAAMe,MAAMK,YACvC,uBAAGjB,UAAU,eAAeD,KAAKF,MAAMe,MAAMM,kB,GAhBtBT,cCSpBU,EARG,SAAAtB,GAChB,IAAMuB,EAASvB,EAAMuB,OAAOC,KAAI,SAAAT,GAC9B,OAAO,kBAAC,EAAD,CAAOU,IAAKV,EAAMW,QAASX,MAAOA,OAG3C,OAAO,yBAAKZ,UAAU,cAAcoB,I,QCPvBI,E,OAAAA,EAAMC,OAAO,CAC1BC,QAAS,6BCuBIC,E,2MApBbnC,MAAQ,CAAE4B,OAAQ,I,EAElBQ,e,uCAAiB,WAAMnC,GAAN,eAAAoC,EAAA,sEACQC,EAAOC,IAAI,WAAY,CAC5CC,OAAQ,CAAEvC,KAAMA,KAFH,OACTwC,EADS,OAKf,EAAK5B,SAAS,CAAEe,OAAQa,EAASC,KAAKC,UALvB,2C,8HASf,OACE,6BACE,kBAAC,EAAD,CAAWrC,SAAUC,KAAK6B,iBAC1B,kBAAC,EAAD,CAAWR,OAAQrB,KAAKP,MAAM4B,c,GAfpBZ,IAAMC,WCOJ2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ba704052.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Search.css\";\n\nclass SearchBar extends React.Component {\n  state = { term: \"\" };\n\n  onFormSubmit = event => {\n    event.preventDefault();\n\n    this.props.onSubmit(this.state.term);\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onFormSubmit}>\n        <div className=\"input\">\n          <input\n            type=\"text\"\n            value={this.state.term}\n            onChange={e => this.setState({ term: e.target.value })}\n            placeholder=\"Search Artist/Album/Track\"\n          />\n        </div>\n      </form>\n    );\n  }\n}\n\nexport default SearchBar;\n","import \"./Album.css\";\nimport React, { Component } from \"react\";\n\nexport default class Album extends Component {\n  render() {\n    return (\n      <div className=\"card\">\n        <a\n          target=\"_blank\"\n          className=\"album-container\"\n          href={this.props.album.collectionViewUrl}\n        >\n          <img\n            className=\"img\"\n            src={this.props.album.artworkUrl100}\n            alt={this.props.album.artistName}\n          />\n          <div className=\"album-text\">\n            <h5 className=\"name\">{this.props.album.artistName}</h5>\n            <p className=\"description\">{this.props.album.trackName}</p>\n          </div>\n        </a>\n      </div>\n    );\n  }\n}\n","import \"./AlbumList.css\";\nimport React from \"react\";\nimport Album from \"./Album\";\n\nconst AlbumList = props => {\n  const albums = props.albums.map(album => {\n    return <Album key={album.trackId} album={album} />;\n  });\n\n  return <div className=\"album-list\">{albums}</div>;\n};\n\nexport default AlbumList;\n","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://itunes.apple.com\"\n});\n","import React from \"react\";\nimport SearchBar from \"./Search\";\nimport AlbumList from \"./AlbumList\";\nimport itunes from \"../api/itunes\";\n\nclass App extends React.Component {\n  state = { albums: [] };\n\n  onSearchSubmit = async term => {\n    const response = await itunes.get(\"/search?\", {\n      params: { term: term }\n    });\n\n    this.setState({ albums: response.data.results });\n  };\n\n  render() {\n    return (\n      <div>\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        <AlbumList albums={this.state.albums} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}